'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("atendees"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class atendees
    Inherits Global.System.Data.DataSet
    
    Private tablestd_atendess As std_atendessDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("std_atendess")) Is Nothing) Then
                MyBase.Tables.Add(New std_atendessDataTable(ds.Tables("std_atendess")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property std_atendess() As std_atendessDataTable
        Get
            Return Me.tablestd_atendess
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As atendees = CType(MyBase.Clone,atendees)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("std_atendess")) Is Nothing) Then
                MyBase.Tables.Add(New std_atendessDataTable(ds.Tables("std_atendess")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablestd_atendess = CType(MyBase.Tables("std_atendess"),std_atendessDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestd_atendess) Is Nothing) Then
                Me.tablestd_atendess.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "atendees"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/atendees.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablestd_atendess = New std_atendessDataTable()
        MyBase.Tables.Add(Me.tablestd_atendess)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializestd_atendess() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As atendees = New atendees()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub std_atendessRowChangeEventHandler(ByVal sender As Object, ByVal e As std_atendessRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class std_atendessDataTable
        Inherits Global.System.Data.TypedTableBase(Of std_atendessRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnstd_id As Global.System.Data.DataColumn
        
        Private columnsemester As Global.System.Data.DataColumn
        
        Private columnlecture As Global.System.Data.DataColumn
        
        Private columnlec1 As Global.System.Data.DataColumn
        
        Private columnlec2 As Global.System.Data.DataColumn
        
        Private columnlec3 As Global.System.Data.DataColumn
        
        Private columnlec4 As Global.System.Data.DataColumn
        
        Private columnlec5 As Global.System.Data.DataColumn
        
        Private columnlec6 As Global.System.Data.DataColumn
        
        Private columnlec7 As Global.System.Data.DataColumn
        
        Private columnlec8 As Global.System.Data.DataColumn
        
        Private columnlec9 As Global.System.Data.DataColumn
        
        Private columnlec10 As Global.System.Data.DataColumn
        
        Private columnlec11 As Global.System.Data.DataColumn
        
        Private columnlec12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "std_atendess"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property std_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstd_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property semesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lectureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlecture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lec12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlec12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As std_atendessRow
            Get
                Return CType(Me.Rows(index),std_atendessRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event std_atendessRowChanging As std_atendessRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event std_atendessRowChanged As std_atendessRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event std_atendessRowDeleting As std_atendessRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event std_atendessRowDeleted As std_atendessRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addstd_atendessRow(ByVal row As std_atendessRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addstd_atendessRow(ByVal std_id As String, ByVal semester As String, ByVal lecture As String, ByVal lec1 As String, ByVal lec2 As String, ByVal lec3 As String, ByVal lec4 As String, ByVal lec5 As String, ByVal lec6 As String, ByVal lec7 As String, ByVal lec8 As String, ByVal lec9 As String, ByVal lec10 As String, ByVal lec11 As String, ByVal lec12 As String) As std_atendessRow
            Dim rowstd_atendessRow As std_atendessRow = CType(Me.NewRow,std_atendessRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, std_id, semester, lecture, lec1, lec2, lec3, lec4, lec5, lec6, lec7, lec8, lec9, lec10, lec11, lec12}
            rowstd_atendessRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstd_atendessRow)
            Return rowstd_atendessRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByid(ByVal id As Integer) As std_atendessRow
            Return CType(Me.Rows.Find(New Object() {id}),std_atendessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As std_atendessDataTable = CType(MyBase.Clone,std_atendessDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New std_atendessDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnstd_id = MyBase.Columns("std_id")
            Me.columnsemester = MyBase.Columns("semester")
            Me.columnlecture = MyBase.Columns("lecture")
            Me.columnlec1 = MyBase.Columns("lec1")
            Me.columnlec2 = MyBase.Columns("lec2")
            Me.columnlec3 = MyBase.Columns("lec3")
            Me.columnlec4 = MyBase.Columns("lec4")
            Me.columnlec5 = MyBase.Columns("lec5")
            Me.columnlec6 = MyBase.Columns("lec6")
            Me.columnlec7 = MyBase.Columns("lec7")
            Me.columnlec8 = MyBase.Columns("lec8")
            Me.columnlec9 = MyBase.Columns("lec9")
            Me.columnlec10 = MyBase.Columns("lec10")
            Me.columnlec11 = MyBase.Columns("lec11")
            Me.columnlec12 = MyBase.Columns("lec12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnstd_id = New Global.System.Data.DataColumn("std_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstd_id)
            Me.columnsemester = New Global.System.Data.DataColumn("semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemester)
            Me.columnlecture = New Global.System.Data.DataColumn("lecture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlecture)
            Me.columnlec1 = New Global.System.Data.DataColumn("lec1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec1)
            Me.columnlec2 = New Global.System.Data.DataColumn("lec2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec2)
            Me.columnlec3 = New Global.System.Data.DataColumn("lec3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec3)
            Me.columnlec4 = New Global.System.Data.DataColumn("lec4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec4)
            Me.columnlec5 = New Global.System.Data.DataColumn("lec5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec5)
            Me.columnlec6 = New Global.System.Data.DataColumn("lec6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec6)
            Me.columnlec7 = New Global.System.Data.DataColumn("lec7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec7)
            Me.columnlec8 = New Global.System.Data.DataColumn("lec8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec8)
            Me.columnlec9 = New Global.System.Data.DataColumn("lec9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec9)
            Me.columnlec10 = New Global.System.Data.DataColumn("lec10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec10)
            Me.columnlec11 = New Global.System.Data.DataColumn("lec11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec11)
            Me.columnlec12 = New Global.System.Data.DataColumn("lec12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlec12)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnstd_id.AllowDBNull = false
            Me.columnsemester.AllowDBNull = false
            Me.columnlecture.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newstd_atendessRow() As std_atendessRow
            Return CType(Me.NewRow,std_atendessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New std_atendessRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(std_atendessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.std_atendessRowChangedEvent) Is Nothing) Then
                RaiseEvent std_atendessRowChanged(Me, New std_atendessRowChangeEvent(CType(e.Row,std_atendessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.std_atendessRowChangingEvent) Is Nothing) Then
                RaiseEvent std_atendessRowChanging(Me, New std_atendessRowChangeEvent(CType(e.Row,std_atendessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.std_atendessRowDeletedEvent) Is Nothing) Then
                RaiseEvent std_atendessRowDeleted(Me, New std_atendessRowChangeEvent(CType(e.Row,std_atendessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.std_atendessRowDeletingEvent) Is Nothing) Then
                RaiseEvent std_atendessRowDeleting(Me, New std_atendessRowChangeEvent(CType(e.Row,std_atendessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removestd_atendessRow(ByVal row As std_atendessRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As atendees = New atendees()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "std_atendessDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class std_atendessRow
        Inherits Global.System.Data.DataRow
        
        Private tablestd_atendess As std_atendessDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestd_atendess = CType(Me.Table,std_atendessDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tablestd_atendess.idColumn),Integer)
            End Get
            Set
                Me(Me.tablestd_atendess.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property std_id() As String
            Get
                Return CType(Me(Me.tablestd_atendess.std_idColumn),String)
            End Get
            Set
                Me(Me.tablestd_atendess.std_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property semester() As String
            Get
                Return CType(Me(Me.tablestd_atendess.semesterColumn),String)
            End Get
            Set
                Me(Me.tablestd_atendess.semesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lecture() As String
            Get
                Return CType(Me(Me.tablestd_atendess.lectureColumn),String)
            End Get
            Set
                Me(Me.tablestd_atendess.lectureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec1() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec1' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec2() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec2' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec3() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec3' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec4() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec4' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec5() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec5' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec6() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec6' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec7() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec7' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec8() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec8' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec9() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec9' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec10() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec10' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec11() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec11' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lec12() As String
            Get
                Try 
                    Return CType(Me(Me.tablestd_atendess.lec12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lec12' in table 'std_atendess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestd_atendess.lec12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec1Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec1Null()
            Me(Me.tablestd_atendess.lec1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec2Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec2Null()
            Me(Me.tablestd_atendess.lec2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec3Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec3Null()
            Me(Me.tablestd_atendess.lec3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec4Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec4Null()
            Me(Me.tablestd_atendess.lec4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec5Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec5Null()
            Me(Me.tablestd_atendess.lec5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec6Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec6Null()
            Me(Me.tablestd_atendess.lec6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec7Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec7Null()
            Me(Me.tablestd_atendess.lec7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec8Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec8Null()
            Me(Me.tablestd_atendess.lec8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec9Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec9Null()
            Me(Me.tablestd_atendess.lec9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec10Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec10Null()
            Me(Me.tablestd_atendess.lec10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec11Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec11Null()
            Me(Me.tablestd_atendess.lec11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Islec12Null() As Boolean
            Return Me.IsNull(Me.tablestd_atendess.lec12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setlec12Null()
            Me(Me.tablestd_atendess.lec12Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class std_atendessRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As std_atendessRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As std_atendessRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As std_atendessRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace atendeesTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class std_atendessTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "std_atendess"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("std_id", "std_id")
            tableMapping.ColumnMappings.Add("semester", "semester")
            tableMapping.ColumnMappings.Add("lecture", "lecture")
            tableMapping.ColumnMappings.Add("lec1", "lec1")
            tableMapping.ColumnMappings.Add("lec2", "lec2")
            tableMapping.ColumnMappings.Add("lec3", "lec3")
            tableMapping.ColumnMappings.Add("lec4", "lec4")
            tableMapping.ColumnMappings.Add("lec5", "lec5")
            tableMapping.ColumnMappings.Add("lec6", "lec6")
            tableMapping.ColumnMappings.Add("lec7", "lec7")
            tableMapping.ColumnMappings.Add("lec8", "lec8")
            tableMapping.ColumnMappings.Add("lec9", "lec9")
            tableMapping.ColumnMappings.Add("lec10", "lec10")
            tableMapping.ColumnMappings.Add("lec11", "lec11")
            tableMapping.ColumnMappings.Add("lec12", "lec12")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `academy`.`std_atendess` WHERE ((`id` = :Original_id) AND (`std_id` ="& _ 
                " :Original_std_id) AND (`semester` = :Original_semester) AND (`lecture` = :Origi"& _ 
                "nal_lecture) AND ((:IsNull_lec1 = 1 AND `lec1` IS NULL) OR (`lec1` = :Original_l"& _ 
                "ec1)) AND ((:IsNull_lec2 = 1 AND `lec2` IS NULL) OR (`lec2` = :Original_lec2)) A"& _ 
                "ND ((:IsNull_lec3 = 1 AND `lec3` IS NULL) OR (`lec3` = :Original_lec3)) AND ((:I"& _ 
                "sNull_lec4 = 1 AND `lec4` IS NULL) OR (`lec4` = :Original_lec4)) AND ((:IsNull_l"& _ 
                "ec5 = 1 AND `lec5` IS NULL) OR (`lec5` = :Original_lec5)) AND ((:IsNull_lec6 = 1"& _ 
                " AND `lec6` IS NULL) OR (`lec6` = :Original_lec6)) AND ((:IsNull_lec7 = 1 AND `l"& _ 
                "ec7` IS NULL) OR (`lec7` = :Original_lec7)) AND ((:IsNull_lec8 = 1 AND `lec8` IS"& _ 
                " NULL) OR (`lec8` = :Original_lec8)) AND ((:IsNull_lec9 = 1 AND `lec9` IS NULL) "& _ 
                "OR (`lec9` = :Original_lec9)) AND ((:IsNull_lec10 = 1 AND `lec10` IS NULL) OR (`"& _ 
                "lec10` = :Original_lec10)) AND ((:IsNull_lec11 = 1 AND `lec11` IS NULL) OR (`lec"& _ 
                "11` = :Original_lec11)) AND ((:IsNull_lec12 = 1 AND `lec12` IS NULL) OR (`lec12`"& _ 
                " = :Original_lec12)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_std_id"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "std_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_semester"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "semester"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lecture"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lecture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec1"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec1"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec2"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec2"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec3"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec3"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec4"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec4"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec5"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec5"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec6"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec6"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec7"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec7"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec8"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec8"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec9"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec9"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec10"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec10"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec11"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec11"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec12"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec12"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `academy`.`std_atendess` (`std_id`, `semester`, `lecture`, `lec1`, `l"& _ 
                "ec2`, `lec3`, `lec4`, `lec5`, `lec6`, `lec7`, `lec8`, `lec9`, `lec10`, `lec11`, "& _ 
                "`lec12`) VALUES (:std_id, :semester, :lecture, :lec1, :lec2, :lec3, :lec4, :lec5"& _ 
                ", :lec6, :lec7, :lec8, :lec9, :lec10, :lec11, :lec12)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "std_id"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "std_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "semester"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "semester"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lecture"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lecture"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec1"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec2"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec3"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec4"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec5"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec5"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec6"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec6"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec7"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec7"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec8"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec8"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec9"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec9"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec10"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec10"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec11"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec11"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec12"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec12"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `academy`.`std_atendess` SET `std_id` = :std_id, `semester` = :semester, `"& _ 
                "lecture` = :lecture, `lec1` = :lec1, `lec2` = :lec2, `lec3` = :lec3, `lec4` = :l"& _ 
                "ec4, `lec5` = :lec5, `lec6` = :lec6, `lec7` = :lec7, `lec8` = :lec8, `lec9` = :l"& _ 
                "ec9, `lec10` = :lec10, `lec11` = :lec11, `lec12` = :lec12 WHERE ((`id` = :Origin"& _ 
                "al_id) AND (`std_id` = :Original_std_id) AND (`semester` = :Original_semester) A"& _ 
                "ND (`lecture` = :Original_lecture) AND ((:IsNull_lec1 = 1 AND `lec1` IS NULL) OR"& _ 
                " (`lec1` = :Original_lec1)) AND ((:IsNull_lec2 = 1 AND `lec2` IS NULL) OR (`lec2"& _ 
                "` = :Original_lec2)) AND ((:IsNull_lec3 = 1 AND `lec3` IS NULL) OR (`lec3` = :Or"& _ 
                "iginal_lec3)) AND ((:IsNull_lec4 = 1 AND `lec4` IS NULL) OR (`lec4` = :Original_"& _ 
                "lec4)) AND ((:IsNull_lec5 = 1 AND `lec5` IS NULL) OR (`lec5` = :Original_lec5)) "& _ 
                "AND ((:IsNull_lec6 = 1 AND `lec6` IS NULL) OR (`lec6` = :Original_lec6)) AND ((:"& _ 
                "IsNull_lec7 = 1 AND `lec7` IS NULL) OR (`lec7` = :Original_lec7)) AND ((:IsNull_"& _ 
                "lec8 = 1 AND `lec8` IS NULL) OR (`lec8` = :Original_lec8)) AND ((:IsNull_lec9 = "& _ 
                "1 AND `lec9` IS NULL) OR (`lec9` = :Original_lec9)) AND ((:IsNull_lec10 = 1 AND "& _ 
                "`lec10` IS NULL) OR (`lec10` = :Original_lec10)) AND ((:IsNull_lec11 = 1 AND `le"& _ 
                "c11` IS NULL) OR (`lec11` = :Original_lec11)) AND ((:IsNull_lec12 = 1 AND `lec12"& _ 
                "` IS NULL) OR (`lec12` = :Original_lec12)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "std_id"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "std_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "semester"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "semester"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lecture"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lecture"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec1"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec2"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec3"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec4"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec5"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec5"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec6"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec6"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec7"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec7"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec8"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec8"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec9"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec9"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec10"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec10"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec11"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec11"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "lec12"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec12"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_std_id"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "std_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_semester"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "semester"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lecture"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lecture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec1"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec1"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec2"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec2"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec3"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec3"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec4"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec4"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec5"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec5"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec6"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec6"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec7"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec7"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec8"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec8"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec9"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec9"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec10"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec10"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec11"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec11"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_lec12"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "lec12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_lec12"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "lec12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.Acadimey.My.MySettings.Default.academyConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, std_id, semester, lecture, lec1, lec2, lec3, lec4, lec5, lec6, lec7, l"& _ 
                "ec8, lec9, lec10, lec11, lec12 FROM academy.std_atendess"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As atendees.std_atendessDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As atendees.std_atendessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As atendees.std_atendessDataTable = New atendees.std_atendessDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As atendees.std_atendessDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As atendees) As Integer
            Return Me.Adapter.Update(dataSet, "std_atendess")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id As Integer,  _
                    ByVal Original_std_id As String,  _
                    ByVal Original_semester As String,  _
                    ByVal Original_lecture As String,  _
                    ByVal Original_lec1 As String,  _
                    ByVal Original_lec2 As String,  _
                    ByVal Original_lec3 As String,  _
                    ByVal Original_lec4 As String,  _
                    ByVal Original_lec5 As String,  _
                    ByVal Original_lec6 As String,  _
                    ByVal Original_lec7 As String,  _
                    ByVal Original_lec8 As String,  _
                    ByVal Original_lec9 As String,  _
                    ByVal Original_lec10 As String,  _
                    ByVal Original_lec11 As String,  _
                    ByVal Original_lec12 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Integer)
            If (Original_std_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_std_id")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_std_id,String)
            End If
            If (Original_semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_semester")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_semester,String)
            End If
            If (Original_lecture Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_lecture")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_lecture,String)
            End If
            If (Original_lec1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_lec1,String)
            End If
            If (Original_lec2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_lec2,String)
            End If
            If (Original_lec3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_lec3,String)
            End If
            If (Original_lec4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_lec4,String)
            End If
            If (Original_lec5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_lec5,String)
            End If
            If (Original_lec6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_lec6,String)
            End If
            If (Original_lec7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_lec7,String)
            End If
            If (Original_lec8 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_lec8,String)
            End If
            If (Original_lec9 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_lec9,String)
            End If
            If (Original_lec10 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_lec10,String)
            End If
            If (Original_lec11 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_lec11,String)
            End If
            If (Original_lec12 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_lec12,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal std_id As String, ByVal semester As String, ByVal lecture As String, ByVal lec1 As String, ByVal lec2 As String, ByVal lec3 As String, ByVal lec4 As String, ByVal lec5 As String, ByVal lec6 As String, ByVal lec7 As String, ByVal lec8 As String, ByVal lec9 As String, ByVal lec10 As String, ByVal lec11 As String, ByVal lec12 As String) As Integer
            If (std_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("std_id")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(std_id,String)
            End If
            If (semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("semester")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(semester,String)
            End If
            If (lecture Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lecture")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(lecture,String)
            End If
            If (lec1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(lec1,String)
            End If
            If (lec2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(lec2,String)
            End If
            If (lec3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(lec3,String)
            End If
            If (lec4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(lec4,String)
            End If
            If (lec5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(lec5,String)
            End If
            If (lec6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(lec6,String)
            End If
            If (lec7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(lec7,String)
            End If
            If (lec8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(lec8,String)
            End If
            If (lec9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(lec9,String)
            End If
            If (lec10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(lec10,String)
            End If
            If (lec11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(lec11,String)
            End If
            If (lec12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(lec12,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal std_id As String,  _
                    ByVal semester As String,  _
                    ByVal lecture As String,  _
                    ByVal lec1 As String,  _
                    ByVal lec2 As String,  _
                    ByVal lec3 As String,  _
                    ByVal lec4 As String,  _
                    ByVal lec5 As String,  _
                    ByVal lec6 As String,  _
                    ByVal lec7 As String,  _
                    ByVal lec8 As String,  _
                    ByVal lec9 As String,  _
                    ByVal lec10 As String,  _
                    ByVal lec11 As String,  _
                    ByVal lec12 As String,  _
                    ByVal Original_id As Integer,  _
                    ByVal Original_std_id As String,  _
                    ByVal Original_semester As String,  _
                    ByVal Original_lecture As String,  _
                    ByVal Original_lec1 As String,  _
                    ByVal Original_lec2 As String,  _
                    ByVal Original_lec3 As String,  _
                    ByVal Original_lec4 As String,  _
                    ByVal Original_lec5 As String,  _
                    ByVal Original_lec6 As String,  _
                    ByVal Original_lec7 As String,  _
                    ByVal Original_lec8 As String,  _
                    ByVal Original_lec9 As String,  _
                    ByVal Original_lec10 As String,  _
                    ByVal Original_lec11 As String,  _
                    ByVal Original_lec12 As String) As Integer
            If (std_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("std_id")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(std_id,String)
            End If
            If (semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("semester")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(semester,String)
            End If
            If (lecture Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lecture")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(lecture,String)
            End If
            If (lec1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(lec1,String)
            End If
            If (lec2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(lec2,String)
            End If
            If (lec3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(lec3,String)
            End If
            If (lec4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(lec4,String)
            End If
            If (lec5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(lec5,String)
            End If
            If (lec6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(lec6,String)
            End If
            If (lec7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(lec7,String)
            End If
            If (lec8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(lec8,String)
            End If
            If (lec9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(lec9,String)
            End If
            If (lec10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(lec10,String)
            End If
            If (lec11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(lec11,String)
            End If
            If (lec12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(lec12,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_id,Integer)
            If (Original_std_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_std_id")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_std_id,String)
            End If
            If (Original_semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_semester")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_semester,String)
            End If
            If (Original_lecture Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_lecture")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_lecture,String)
            End If
            If (Original_lec1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_lec1,String)
            End If
            If (Original_lec2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_lec2,String)
            End If
            If (Original_lec3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_lec3,String)
            End If
            If (Original_lec4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_lec4,String)
            End If
            If (Original_lec5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_lec5,String)
            End If
            If (Original_lec6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_lec6,String)
            End If
            If (Original_lec7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_lec7,String)
            End If
            If (Original_lec8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_lec8,String)
            End If
            If (Original_lec9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_lec9,String)
            End If
            If (Original_lec10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_lec10,String)
            End If
            If (Original_lec11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_lec11,String)
            End If
            If (Original_lec12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_lec12,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _std_atendessTableAdapter As std_atendessTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property std_atendessTableAdapter() As std_atendessTableAdapter
            Get
                Return Me._std_atendessTableAdapter
            End Get
            Set
                Me._std_atendessTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._std_atendessTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._std_atendessTableAdapter.Connection) Is Nothing)) Then
                    Return Me._std_atendessTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._std_atendessTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As atendees, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._std_atendessTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.std_atendess.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._std_atendessTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As atendees, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._std_atendessTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.std_atendess.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._std_atendessTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As atendees, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._std_atendessTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.std_atendess.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._std_atendessTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As atendees) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._std_atendessTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._std_atendessTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._std_atendessTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._std_atendessTableAdapter, Me._std_atendessTableAdapter.Connection)
                    Me._std_atendessTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._std_atendessTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._std_atendessTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._std_atendessTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._std_atendessTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._std_atendessTableAdapter) Is Nothing) Then
                    Me._std_atendessTableAdapter.Connection = CType(revertConnections(Me._std_atendessTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._std_atendessTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
